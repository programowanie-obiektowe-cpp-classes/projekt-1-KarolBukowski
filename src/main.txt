#include <algorithm>
#include <iomanip>
#include <iostream>
#include <memory>
#include <random>
#include <string>
#include <vector>

// Stale dla wydajnosci pracownikow
const int CI   = 100;
const int CMag = 50;
const int CMkt = 80;
const int CR   = 120;

// Stale dla kredytow
const int    MAX_KREDYT             = 36;
const double MAX_ZADLUZENIE_MNOZNIK = 3.0;

// Stale do zwyciestwa
const int    N_MIESIECY            = 12;
const double WARTOSC_DO_ZWYCIESTWA = 100000.0;

// Stale wynagrodzenia pracownikow
const int WYNAGRODZENIE_INZ = 3000;
const int WYNAGRODZENIE_MAG = 2500;
const int WYNAGRODZENIE_MKT = 2800;
const int WYNAGRODZENIE_ROB = 2000;

std::default_random_engine       generator;
std::uniform_int_distribution<>  bool_dist(0, 1);
std::uniform_int_distribution<>  follows_dist(0, 1000);
std::uniform_real_distribution<> but_dist(40.0, 45.0);

class Pracownik
{
public:
    Pracownik(std::string imie) : imie(imie) {}

    // Domyślny konstruktor
    Pracownik() = default;

    // Wirtualny destruktor
    virtual ~Pracownik() = default;

    // Konstruktor kopiujący i operator kopiujący przypisania
    Pracownik(const Pracownik& other)            = default;
    Pracownik& operator=(const Pracownik& other) = default;

    // Konstruktor przenoszący i operator przenoszący przypisania
    Pracownik(Pracownik&& other) noexcept            = default;
    Pracownik& operator=(Pracownik&& other) noexcept = default;

    virtual void print() const            = 0;
    virtual int  getWynagrodzenie() const = 0;

protected:
    std::string imie;
};

class Inz : public Pracownik
{
public:
    Inz(std::string imie, std::string wydzial) : Pracownik(imie), wydzial(wydzial) {}
    void print() const override { std::cout << "Inzynier: " << imie << ", Wydzial: " << wydzial << "\n"; }
    int  getWynagrodzenie() const override { return WYNAGRODZENIE_INZ; }

private:
    std::string wydzial;
};

class Mag : public Pracownik
{
public:
    Mag(std::string imie, bool obsl_widl) : Pracownik(imie), obsl_widl(obsl_widl) {}
    void print() const override
    {
        std::cout << "Magazynier: " << imie << ", Obsluga wozka widlowego: " << (obsl_widl ? "tak" : "nie") << "\n";
    }
    int getWynagrodzenie() const override { return WYNAGRODZENIE_MAG; }

private:
    bool obsl_widl;
};

class Mkt : public Pracownik
{
public:
    Mkt(std::string imie, int follows) : Pracownik(imie), follows(follows) {}
    void print() const override { std::cout << "Marketer: " << imie << ", Liczba obserwujacych: " << follows << "\n"; }
    int  getWynagrodzenie() const override { return WYNAGRODZENIE_MKT; }

private:
    int follows;
};

class Rob : public Pracownik
{
public:
    Rob(std::string imie, double but) : Pracownik(imie), but(but) {}
    void print() const override
    {
        std::cout << "Robotnik: " << imie << ", Rozmiar buta: " << std::fixed << std::setprecision(1) << but << "\n";
    }
    int getWynagrodzenie() const override { return WYNAGRODZENIE_ROB; }

private:
    double but;
};

class Kredyt
{
public:
    Kredyt(double kwota, int raty, double oprocentowanie) : pozostale_raty(raty)
    {
        double calkowity_dlug = kwota * (1 + (oprocentowanie * (pozostale_raty / 12.0)));
        wysokosc_raty         = calkowity_dlug / pozostale_raty;
    }
    double splac_rate()
    {
        if (pozostale_raty > 0)
        {
            pozostale_raty--;
            return wysokosc_raty;
        }
        return 0.0;
    }
    bool   czy_splacony() const { return pozostale_raty == 0; }
    double get_pozostaly_dlug() const { return pozostale_raty * wysokosc_raty; }

private:
    double wysokosc_raty;
    int    pozostale_raty;
};

class Firma
{
public:
    Firma() : stan_konta(10000), n_prac(0), n_kredytow(0), n_mag(0), n_inz(0), n_mkt(0), n_rob(0), magazyn(0)
    {
        // Zatrudnij pracowników na początku gry
        zatrudnij(std::make_unique< Inz >("Karol Bukowski", "MEiL"));
        zatrudnij(std::make_unique< Mag >("Karol Bukowski", bool_dist(generator) == 1));
        zatrudnij(std::make_unique< Mkt >("Karol Bukowski", follows_dist(generator)));
        zatrudnij(std::make_unique< Rob >("Karol Bukowski", std::round(but_dist(generator) * 10.0) / 10.0));
    }

    void zatrudnij(std::unique_ptr< Pracownik > pracownik)
    {
        if (dynamic_cast< Inz* >(pracownik.get()))
        {
            n_inz++;
        }
        else if (dynamic_cast< Mag* >(pracownik.get()))
        {
            n_mag++;
        }
        else if (dynamic_cast< Mkt* >(pracownik.get()))
        {
            n_mkt++;
        }
        else if (dynamic_cast< Rob* >(pracownik.get()))
        {
            n_rob++;
        }
        pracownicy.push_back(std::move(pracownik));
        n_prac++;
    }

    void wez_kredyt(double kwota, int czas_splaty)
    {
        if (czas_splaty > MAX_KREDYT)
        {
            std::cout << "Zbyt dlugi okres splaty. Maksymalny okres: " << MAX_KREDYT << " miesiecy.\n";
            return;
        }

        double oprocentowanie = 0.05 + 0.05 * (czas_splaty / 12);
        kredyty.push_back(std::make_unique< Kredyt >(kwota, czas_splaty, oprocentowanie));
        n_kredytow++;
        stan_konta += kwota;
    }

    void zaplac_wynagrodzenie()
    {
        int wynagrodzenie = 0;
        for (const auto& pracownik : pracownicy)
        {
            wynagrodzenie += pracownik->getWynagrodzenie();
        }
        stan_konta -= wynagrodzenie;
    }

    void splac_raty()
    {
        for (auto it = kredyty.begin(); it != kredyty.end();)
        {
            double rata = (*it)->splac_rate();
            stan_konta -= rata;
            if ((*it)->czy_splacony())
            {
                it = kredyty.erase(it);
                n_kredytow--;
            }
            else
            {
                ++it;
            }
        }
    }

    double oblicz_przychod()
    {
        int pojemnosc_magazynu = n_mag * CMag;
        int cena_produktu      = n_inz * CI;
        int popyt              = n_mkt * CMkt;

        int teoretyczna_produkcja = n_rob * CR;

        int faktyczna_produkcja = std::min(teoretyczna_produkcja, pojemnosc_magazynu);

        int dostepne_produkty = magazyn + faktyczna_produkcja;
        int sprzedane         = std::min(dostepne_produkty, popyt);

        magazyn = dostepne_produkty - sprzedane;

        if (magazyn > pojemnosc_magazynu)
        {
            magazyn = pojemnosc_magazynu;
        }

        return sprzedane * cena_produktu;
    }

    void otrzymaj_przychod()
    {
        double przychod = oblicz_przychod();
        stan_konta += przychod;

        historia_przychodow.push_back(przychod);
        if (historia_przychodow.size() > N_MIESIECY)
        {
            historia_przychodow.erase(historia_przychodow.begin());
        }
    }

    double oblicz_zadluzenie() const
    {
        double zadluzenie = 0;
        for (const auto& kredyt : kredyty)
        {
            zadluzenie += kredyt->get_pozostaly_dlug();
        }
        return zadluzenie;
    }

    void drukuj_pracownikow() const
    {
        std::cout << "Podsumowanie pracownikow:\n";
        std::cout << "Inzynierowie: " << n_inz << "\n";
        std::cout << "Magazynierowie: " << n_mag << "\n";
        std::cout << "Marketerzy: " << n_mkt << "\n";
        std::cout << "Robotnicy: " << n_rob << "\n";
        for (const auto& pracownik : pracownicy)
        {
            pracownik->print();
        }
    }

    void drukuj_informacje() const
    {
        int cena_produktu         = n_inz * CI;
        int popyt                 = n_mkt * CMkt;
        int teoretyczna_produkcja = n_rob * CR;
        int pojemnosc_magazynu    = n_mag * CMag;

        std::cout << "Informacje o firmie: \n";
        std::cout << "Cena produktu: " << cena_produktu << "\n";
        std::cout << "Popyt: " << popyt << "\n";
        std::cout << "Teoretyczna produkcja: " << teoretyczna_produkcja << "\n";
        std::cout << "Pojemnosc magazynu: " << pojemnosc_magazynu << "\n";
        std::cout << "Magazyn: " << magazyn << "\n";
        std::cout << "Stan konta: " << stan_konta << "\n";
        std::cout << "Zadluzenie: " << oblicz_zadluzenie() << "\n";
        std::cout << "Wartosc spolki (sredni przychod, nie stan konta): " << oblicz_wartosc_spolki() << "\n";
    }

    double get_stan_konta() const { return stan_konta; }

    double oblicz_wartosc_spolki() const
    {
        if (historia_przychodow.empty())
        {
            return 0.0;
        }

        double suma = 0.0;
        for (double przychod : historia_przychodow)
        {
            suma += przychod;
        }
        return suma / historia_przychodow.size();
    }

private:
    double                                      stan_konta;
    int                                         n_prac;
    int                                         n_kredytow;
    int                                         n_mag;
    int                                         n_inz;
    int                                         n_mkt;
    int                                         n_rob;
    int                                         magazyn;
    std::vector< double >                       historia_przychodow;
    std::vector< std::unique_ptr< Pracownik > > pracownicy;
    std::vector< std::unique_ptr< Kredyt > >    kredyty;
};

class Gra
{
public:
    Gra() : firma(std::make_unique< Firma >()), stan(true) {}

    void akcja_gracza()
    {
        std::string komenda;
        std::cout << "Wpisz komende: ";
        std::cin >> komenda;

        if (komenda == "lp")
        {
            firma->drukuj_pracownikow();
        }
        else if (komenda == "zinz")
        {
            firma->zatrudnij(std::make_unique< Inz >("Karol Bukowski", "MEiL"));
        }
        else if (komenda == "zmag")
        {
            firma->zatrudnij(std::make_unique< Mag >("Karol Bukowski", bool_dist(generator) == 1));
        }
        else if (komenda == "zmkt")
        {
            firma->zatrudnij(std::make_unique< Mkt >("Karol Bukowski", follows_dist(generator)));
        }
        else if (komenda == "zrob")
        {
            firma->zatrudnij(std::make_unique< Rob >("Karol Bukowski", std::round(but_dist(generator) * 10.0) / 10.0));
        }
        else if (komenda == "kred")
        {
            double kwota;
            int    czas;
            std::cout << "Podaj kwote kredytu: ";
            std::cin >> kwota;
            std::cout << "Podaj czas splaty w miesiacach: ";
            std::cin >> czas;
            firma->wez_kredyt(kwota, czas);
        }
        else if (komenda == "kt")
        {
            firma->otrzymaj_przychod();
            firma->zaplac_wynagrodzenie();
            firma->splac_raty();
            std::cout << "Stan konta: " << firma->get_stan_konta() << "\n";
        }
        else if (komenda == "info")
        {
            firma->drukuj_informacje();
        }
        else if (komenda == "help")
        {
            std::cout << "Dostepne komendy:\n";
            std::cout << "lp - wylistuj pracownikow\n";
            std::cout << "zinz - zatrudnij inzyniera\n";
            std::cout << "zmag - zatrudnij magazyniera\n";
            std::cout << "zmkt - zatrudnij marketera\n";
            std::cout << "zrob - zatrudnij robotnika\n";
            std::cout << "kred - wez kredyt\n";
            std::cout << "kt - zakoncz ture i wyswietl stan firmy\n";
            std::cout << "info - wyswietl informacje o firmie\n";
            std::cout << "help - wyswietl dostepne komendy\n";
        }
        else
        {
            std::cout << "Nieznana komenda." << std::endl;
        }
    }

    bool get_stan() const { return stan; }

    void tick()
    {
        if (firma->get_stan_konta() < 0)
        {
            std::cout << "Firma zbankrutowala!\n";
            stan = false;
        }
        else if (firma->oblicz_zadluzenie() > firma->get_stan_konta() * MAX_ZADLUZENIE_MNOZNIK)
        {
            std::cout << "Firma nie moze splacic zadluzenia. Firma zbankrutowala!\n";
            stan = false;
        }
        else
        {
            double wartosc_spolki           = firma->oblicz_wartosc_spolki();
            double wartosc_po_odjeciu_dlugu = wartosc_spolki - firma->oblicz_zadluzenie();

            if (wartosc_po_odjeciu_dlugu >= WARTOSC_DO_ZWYCIESTWA)
            {
                std::cout << "Gratulacje! Twoja firma osiagnelaa wartosc " << wartosc_po_odjeciu_dlugu
                          << " i zwyciezyles w grze!\n";
                stan = false;
            }
        }
    }

private:
    std::unique_ptr< Firma > firma;
    bool                     stan;
};

int main()
{
    Gra gra;
    while (gra.get_stan())
    {
        gra.akcja_gracza();
        gra.tick();
    }
    return 0;
}
